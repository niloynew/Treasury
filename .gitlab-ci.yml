variables:
  PIPELINE_VERSION: 'SERVICE-0.0.2-GRADLE'
  DEBUG_OPTS: '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
  # DOCKER_FILE: ''
  # DOCKER_STACK_FILE: ''

  # ARTIFACT_NAME: ''
  # ARTIFACT_BUILD_PATH: ''

  
  # SERVICE_NAME: ''
  # SERVICE_IMAGE: ''
  # SERVICE_URL: ''
  # HEALTH_CHECK_URL: ''
  # JAVA_OPTS: ''
  # CONFIG_PROFILES: ''
  # CONFIG_SERVER_URI: ''
  
  # ENABLE_DEV_DEBUG: ''
  # DEBUG_PORT: ''

stages:
  - build
  - build_image
  - push_image
  - deploy

cache:
  paths:
    - ${ARTIFACT_BUILD_PATH}/


build:
  stage: build
  only: ['master']
  tags:
    - 'openjdk:8u181'
  before_script:
    - chmod +x gradlew
  script:
    - ./gradlew clean build -x test


build_image:
  stage: build_image
  when: on_success
  before_script:
    - 'echo "Using pipeline: ${PIPELINE_VERSION}"'
    - wget -O Dockerfile $DOCKER_FILE
    - echo "Dockerfile:-"
    - echo "$(cat Dockerfile)"
  script:
    - export ARTIFACT="${ARTIFACT_BUILD_PATH}/libs/$(cat gradle.properties | grep PROJECT_ARTIFACT | cut -d'=' -f2-)-$(cat gradle.properties | grep PROJECT_VERSION | cut -d'=' -f2-).jar"
    - export VERSION="$(cat gradle.properties | grep PROJECT_VERSION | cut -d'=' -f2-)"
    - docker build --rm --force-rm --label "com.mislbd.global.build.id=$CI_PIPELINE_ID" --label "com.mislbd.local.build.id=$CI_PIPELINE_ID" --label "com.mislbd.version=${VERSION}" --build-arg ARTIFACT="$ARTIFACT" -t ${DOCKER_IMAGE}:latest .
    - docker tag ${DOCKER_IMAGE}:latest ${DOCKER_IMAGE}:B${CI_PIPELINE_ID}
  only: ['master']
  tags: ['shell']

push_image:
  stage: push_image
  when: on_success
  only:
    - master
  tags:
    - shell
  before_script:
    - 'echo "Using pipeline: ${PIPELINE_VERSION}"'
  script:
    - export ARTIFACT="${ARTIFACT_BUILD_PATH}/libs/$(cat gradle.properties | grep PROJECT_ARTIFACT | cut -d'=' -f2-)-$(cat gradle.properties | grep PROJECT_VERSION | cut -d'=' -f2-).jar"
    - docker push ${DOCKER_IMAGE}:latest
    - docker push ${DOCKER_IMAGE}:B${CI_PIPELINE_ID}
    # clean up image
    - docker rmi ${DOCKER_IMAGE}:latest
    - docker rmi ${DOCKER_IMAGE}:B${CI_PIPELINE_ID}

deploy_dev:
  stage: deploy
  when: on_success
  only:
    - master
  tags:
    - docker-server-ssh
  before_script:
    - 'echo "Using pipeline: ${PIPELINE_VERSION}"'
    - 'export STACK_FILE_STORE=/home/docker/.stack/dev'
    - 'export SERVICE_NETWORK=stage-net'
    - 'export DEBUG_PORT=${ENABLE_DEV_DEBUG:+${DEBUG_PORT}}'
    - 'export DEBUG_PORT_PREFIX=3'
    - 'export CONFIG_SERVER_URI=${DEV_CONFIG_SERVER_URI}'
    - 'export STACK_NAME=stage-ababil-service'
    - 'export STACK_SERVICE_NAME=${STACK_NAME}_${SERVICE_NAME}'
    - 'export TRAEFIK_TAG=${STACK_NAME}-stack'
    - 'export SERVICE_IMAGE=${DOCKER_IMAGE}:B${CI_PIPELINE_ID}'
    - wget -O stack.yml $DOCKER_STACK_FILE
    - mkdir -p ${STACK_FILE_STORE}
    - 'eval "echo \"$(<stack.yml)"\" > ${STACK_FILE_STORE}/${SERVICE_NAME}.yml'
  script:
    - echo "Stack File:-"
    - cat ${STACK_FILE_STORE}/${SERVICE_NAME}.yml
    - docker stack deploy -c ${STACK_FILE_STORE}/${SERVICE_NAME}.yml ${STACK_NAME}
    - docker service update --force --image ${SERVICE_IMAGE} ${STACK_SERVICE_NAME}

deploy_qa:
  stage: deploy
  when: manual
  only:
    - master
  tags:
    - docker-server-ssh
  before_script:
    - 'echo "Using pipeline: ${PIPELINE_VERSION}"'
    - 'export STACK_FILE_STORE=/home/docker/.stack/qa'
    - 'export SERVICE_NETWORK=qa-net'
    - 'export DEBUG_PORT=${ENABLE_QA_DEBUG:+${DEBUG_PORT}}'
    - 'export DEBUG_PORT_PREFIX=4'
    - 'export CONFIG_SERVER_URI=${QA_CONFIG_SERVER_URI}'
    - 'export STACK_NAME=qa-ababil-service'
    - 'export STACK_SERVICE_NAME=${STACK_NAME}_${SERVICE_NAME}'
    - 'export TRAEFIK_TAG=${STACK_NAME}-stack'
    - 'export SERVICE_IMAGE=${DOCKER_IMAGE}:B${CI_PIPELINE_ID}'
    - wget -O stack.yml $DOCKER_STACK_FILE
    - mkdir -p ${STACK_FILE_STORE}
    - 'eval "echo \"$(<stack.yml)"\" > ${STACK_FILE_STORE}/${SERVICE_NAME}.yml'
  script:
    - echo "Stack File:-"
    - cat ${STACK_FILE_STORE}/${SERVICE_NAME}.yml
    - docker stack deploy -c ${STACK_FILE_STORE}/${SERVICE_NAME}.yml ${STACK_NAME}
    - docker service update --force --image ${SERVICE_IMAGE} ${STACK_SERVICE_NAME}

deploy_sbl:
  stage: deploy
  when: manual
  only:
    - master
  tags:
    - docker-server-ssh
  before_script:
    - 'echo "Using pipeline: ${PIPELINE_VERSION}"'
    - 'export STACK_FILE_STORE=/home/docker/.stack/sbl'
    - 'export SERVICE_NETWORK=sbl-net'
    - 'export DEBUG_PORT=${ENABLE_SBL_DEBUG:+${DEBUG_PORT}}'
    - 'export DEBUG_PORT_PREFIX=1'
    - 'export CONFIG_SERVER_URI=${SBL_CONFIG_SERVER_URI}'
    - 'export STACK_NAME=sbl-ababil-service'
    - 'export STACK_SERVICE_NAME=${STACK_NAME}_${SERVICE_NAME}'
    - 'export TRAEFIK_TAG=${STACK_NAME}-stack'
    - 'export SERVICE_IMAGE=${DOCKER_IMAGE}:B${CI_PIPELINE_ID}'
    - wget -O stack.yml $DOCKER_STACK_FILE
    - mkdir -p ${STACK_FILE_STORE}
    - 'eval "echo \"$(<stack.yml)"\" > ${STACK_FILE_STORE}/${SERVICE_NAME}.yml'
  script:
    - echo "Stack File:-"
    - cat ${STACK_FILE_STORE}/${SERVICE_NAME}.yml
    - docker stack deploy -c ${STACK_FILE_STORE}/${SERVICE_NAME}.yml ${STACK_NAME}
    - docker service update --force --image ${SERVICE_IMAGE} ${STACK_SERVICE_NAME}
